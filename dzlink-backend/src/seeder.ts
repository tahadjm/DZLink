import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { ConfigService } from '@nestjs/config';
import { AdminsRepository } from '@/libs/repositories';
import { CitesService } from './cities/cities.service';
import { TagService } from './tags/tags.service';
import * as argon2 from 'argon2';

// --- Seed Admin ---
async function seedAdmin(adminsRepo: AdminsRepository, config: ConfigService) {
  const email = config.get<string>('seeder.SEED_ADMIN_EMAIL');
  const password = config.get<string>('seeder.SEED_ADMIN_PASSWORD');

  const exists = await adminsRepo.findByEmail(email);
  if (exists) {
    console.log('‚ÑπÔ∏è Admin already exists, skipping.');
    return;
  }

  const hash = await argon2.hash(password);
  await adminsRepo.createAdmin({ email, password_hash: hash });

  console.log(`‚úÖ Admin created: ${email} / ${password}`);
}

// --- Seed Cities (58 wilayas of Algeria) ---
async function seedCities(citiesService: CitesService) {
  const wilayas = [
    'Adrar',
    'Chlef',
    'Laghouat',
    'Oum El Bouaghi',
    'Batna',
    'B√©ja√Øa',
    'Biskra',
    'B√©char',
    'Blida',
    'Bouira',
    'Tamanrasset',
    'T√©bessa',
    'Tlemcen',
    'Tiaret',
    'Tizi Ouzou',
    'Algiers',
    'Djelfa',
    'Jijel',
    'S√©tif',
    'Sa√Øda',
    'Skikda',
    'Sidi Bel Abb√®s',
    'Annaba',
    'Guelma',
    'Constantine',
    'M√©d√©a',
    'Mostaganem',
    'M‚ÄôSila',
    'Mascara',
    'Ouargla',
    'Oran',
    'El Bayadh',
    'Illizi',
    'Bordj Bou Arr√©ridj',
    'Boumerd√®s',
    'El Tarf',
    'Tindouf',
    'Tissemsilt',
    'El Oued',
    'Khenchela',
    'Souk Ahras',
    'Tipaza',
    'Mila',
    'A√Øn Defla',
    'Na√¢ma',
    'A√Øn T√©mouchent',
    'Gharda√Øa',
    'Relizane',
    'Timimoun',
    'Bordj Badji Mokhtar',
    'Ouled Djellal',
    'B√©ni Abb√®s',
    'In Salah',
    'In Guezzam',
    'Touggourt',
    'Djanet',
    'El M‚ÄôGhair',
    'El Meniaa',
  ];

  for (const name of wilayas) {
    let exists = null;
    try {
      exists = await citiesService.findByName(name);
    } catch {
      // ignore NotFoundException
    }

    if (!exists) {
      await citiesService.create({ name });
      console.log(`‚úÖ City added: ${name}`);
    } else {
      console.log(`‚ÑπÔ∏è City exists: ${name}`);
    }
  }
  console.log('üåç Cities seeding done.');
}

// --- Seed Tags ---
async function seedTags(tagService: TagService) {
  const tags = [
    // Web & Frontend
    'JavaScript',
    'TypeScript',
    'React',
    'React Native',
    'Next.js',
    'Angular',
    'Vue.js',
    'TailwindCSS',
    'Sass',

    // Backend
    'Node.js',
    'NestJS',
    'Express.js',
    'GraphQL',
    'REST API',

    // Databases
    'MongoDB',
    'PostgreSQL',
    'MySQL',
    'Redis',

    // DevOps
    'Docker',
    'Kubernetes',
    'CI/CD',
    'AWS',
    'Azure',
    'GCP',

    // Design & UI
    'UI/UX',
    'Figma',
    'Adobe XD',

    // Business & Freelancing
    'Freelancing',
    'Startup',
    'SEO',
    'Marketing',

    // Mobile
    'iOS',
    'Android',
    'Flutter',

    // Others
    'AI/ML',
    'Data Science',
    'Cybersecurity',
    'Blockchain',
  ];

  for (const name of tags) {
    let exists = null;
    try {
      exists = await tagService.findByName(name);
    } catch {
      // ignore NotFoundException
    }

    if (!exists) {
      await tagService.create({ name });
      console.log(`‚úÖ Tag added: ${name}`);
    } else {
      console.log(`‚ÑπÔ∏è Tag exists: ${name}`);
    }
  }

  console.log('üè∑Ô∏è Tags seeding done.');
}

// --- Bootstrap ---
async function bootstrap() {
  const app = await NestFactory.createApplicationContext(AppModule);
  const config = app.get(ConfigService);

  try {
    console.log('üå± Starting database seeding...');

    const adminsRepo = app.get(AdminsRepository);
    const citiesService = app.get(CitesService);
    const tagService = app.get(TagService);

    if (config.get('seeder.SEED_ADMIN') === 'true') {
      await seedAdmin(adminsRepo, config);
    }
    if (config.get('seeder.SEED_CITIES') === 'true') {
      await seedCities(citiesService);
    }
    if (config.get('seeder.SEED_TAGS') === 'true') {
      await seedTags(tagService);
    }

    console.log('‚úÖ Seeding complete!');
  } catch (err) {
    console.error('‚ùå Seeding failed:', err);
    process.exit(1);
  } finally {
    await app.close();
  }
}

bootstrap();
